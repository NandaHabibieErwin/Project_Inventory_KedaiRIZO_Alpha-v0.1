@model Project_Inventory_KedaiRIZO_Alpha_v0._1.Controllers.TransactionViewModel

@{
    ViewData["Title"] = "Tambah Transaksi Baru";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>

    <form asp-action="Create" id="transactionForm">
        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Informasi Transaksi</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label asp-for="UserId" class="form-label">User</label>
                            <select asp-for="UserId" class="form-select" asp-items="ViewBag.UserId">
                                <option value="">-- Pilih User --</option>
                            </select>
                            <span asp-validation-for="UserId" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label asp-for="Tanggal" class="form-label">Tanggal</label>
                            <input asp-for="Tanggal" class="form-control" type="datetime-local" />
                            <span asp-validation-for="Tanggal" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">Detail Produk</h5>
                <button type="button" class="btn btn-sm btn-success" onclick="addNewRow()">
                    <i class="fas fa-plus"></i> Tambah Baris
                </button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered" id="productTable">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 40%;">Produk</th>
                                <th style="width: 15%;">Quantity</th>
                                <th style="width: 20%;">Harga Satuan</th>
                                <th style="width: 20%;">Total</th>
                                <th style="width: 5%;">Action</th>
                            </tr>
                        </thead>
                        <tbody id="productTableBody">
                            @for (int i = 0; i < Model.Items.Count; i++)
                            {
                                <tr class="product-row">
                                    <td>
                                        <select asp-for="Items[i].ProductId" class="form-select product-select" onchange="updatePrice(this, @i)">
                                            <option value="">-- Pilih Produk --</option>
                                            @foreach (var product in ViewBag.Products as SelectList)
                                            {
                                                <option value="@product.Value">@product.Text</option>
                                            }
                                        </select>
                                        <input type="hidden" asp-for="Items[i].ProductId" />
                                        <span asp-validation-for="Items[@i].ProductId" class="text-danger small"></span>
                                    </td>
                                    <td>
                                        <input asp-for="Items[i].Quantity" class="form-control quantity-input" type="number" min="0" onchange="calculateTotal(@i)" />
                                        <div class="stock-info text-muted small"></div>
                                        <span asp-validation-for="Items[@i].Quantity" class="text-danger small"></span>
                                    </td>
                                    <td>
                                        <span class="price-display">Rp 0</span>
                                        <input type="hidden" class="unit-price" value="0" />
                                    </td>
                                    <td>
                                        <span class="total-display font-weight-bold">Rp 0</span>
                                        <input type="hidden" class="item-total" value="0" />
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger" onclick="removeRow(this)" title="Hapus Baris">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr class="table-info">
                                <td colspan="3" class="text-end"><strong>Grand Total:</strong></td>
                                <td><strong id="grandTotal">Rp 0</strong></td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Simpan Transaksi
            </button>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Kembali
            </a>
        </div>
    </form>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        let rowIndex = @Model.Items.Count;

        async function updatePrice(selectElement, index) {
            const productId = selectElement.value;
            const row = selectElement.closest('tr');
            const priceDisplay = row.querySelector('.price-display');
            const unitPriceInput = row.querySelector('.unit-price');
            const quantityInput = row.querySelector('.quantity-input');
            const stockInfo = row.querySelector('.stock-info');

            if (productId) {
                try {
                    const response = await fetch(`/Data_Transaksi/GetProductPrice?productId=${productId}`);
                    const data = await response.json();

                    priceDisplay.textContent = `Rp ${data.price.toLocaleString('id-ID')}`;
                    unitPriceInput.value = data.price;
                    stockInfo.textContent = `Stock: ${data.stock}`;
                    quantityInput.max = data.stock;

                    calculateTotal(index);
                } catch (error) {
                    console.error('Error fetching product price:', error);
                }
            } else {
                priceDisplay.textContent = 'Rp 0';
                unitPriceInput.value = 0;
                stockInfo.textContent = '';
                quantityInput.max = '';
                calculateTotal(index);
            }
        }

        function calculateTotal(index) {
            const rows = document.querySelectorAll('.product-row');
            const row = rows[index];
            const quantity = parseInt(row.querySelector('.quantity-input').value) || 0;
            const unitPrice = parseInt(row.querySelector('.unit-price').value) || 0;
            const total = quantity * unitPrice;

            row.querySelector('.total-display').textContent = `Rp ${total.toLocaleString('id-ID')}`;
            row.querySelector('.item-total').value = total;

            updateGrandTotal();
        }

        function updateGrandTotal() {
            let grandTotal = 0;
            document.querySelectorAll('.item-total').forEach(input => {
                grandTotal += parseInt(input.value) || 0;
            });
            document.getElementById('grandTotal').textContent = `Rp ${grandTotal.toLocaleString('id-ID')}`;
        }

        function addNewRow() {
            const tbody = document.getElementById('productTableBody');
            const newRow = document.createElement('tr');
            newRow.className = 'product-row';
            newRow.innerHTML = `
                <td>
                    <select name="Items[${rowIndex}].ProductId" class="form-select product-select" onchange="updatePrice(this, ${rowIndex})">
                        <option value="">-- Pilih Produk --</option>
        @foreach (var product in ViewBag.Products as SelectList)
        {
                                <option value="@product.Value">@product.Text</option>
        }
                    </select>
                </td>
                <td>
                    <input name="Items[${rowIndex}].Quantity" class="form-control quantity-input" type="number" min="0" onchange="calculateTotal(${rowIndex})" />
                    <div class="stock-info text-muted small"></div>
                </td>
                <td>
                    <span class="price-display">Rp 0</span>
                    <input type="hidden" class="unit-price" value="0" />
                </td>
                <td>
                    <span class="total-display font-weight-bold">Rp 0</span>
                    <input type="hidden" class="item-total" value="0" />
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-danger" onclick="removeRow(this)" title="Hapus Baris">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            `;
            tbody.appendChild(newRow);
            rowIndex++;
            $.validator.unobtrusive.parse('#transactionForm');
        }

        function removeRow(button) {
            const row = button.closest('tr');
            row.remove();
            updateGrandTotal();
        }

        // Initialize calculations on page load
        document.addEventListener('DOMContentLoaded', function() {
            const rows = document.querySelectorAll('.product-row');
            rows.forEach((row, index) => {
                const selectElement = row.querySelector('.product-select');
                if (selectElement.value) {
                    updatePrice(selectElement, index);
                }
            });
        });
    </script>
}
@*
@model Project_Inventory_KedaiRIZO_Alpha_v0._1.Models.Data_Transaksi

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Data_Transaksi</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="UserId" class="control-label"></label>
                <select asp-for="UserId" class ="form-control" asp-items="ViewBag.UserId"></select>
            </div>
            <div class="form-group">
                <label asp-for="Tanggal" class="control-label"></label>
                <input asp-for="Tanggal" class="form-control" />
                <span asp-validation-for="Tanggal" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TotalAmount" class="control-label"></label>
                <input asp-for="TotalAmount" class="form-control" />
                <span asp-validation-for="TotalAmount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
*@